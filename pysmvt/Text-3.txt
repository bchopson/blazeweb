== User Object ==

provided by pysmvt.  will have methods that can be called like:

{{{
if User.has_auth('permission1', 'permission2'):
    pass
    
User.add_token('permission1', 'permission2', 'permission3')
}}}

From the User object perspective, there is not anything like a "deny" permission.  You either have a permission/token or you don't, end of story.  If the User object does not have the requested permission loaded, that is a deny.


== Populating the User Object ==

Authentication and authorization is defined at the application level and routines
will commonly be passed down to an Application Module (AM).

Permissions will be defined as follows:

1) users have default group of "public" if not logged in
2) When a user is authenticated, their user name is stored in a session
3) On each request, when the Responding View is initialized, the Responding View is responsible for calling an action of the Users AM which will
    * make a DB request to get all permissions the user has
    * add those permissions to the User object
2) when a situation is encountered where a permission is needed (i.e. to acces a view or edit a record), then a simple User.has_auth('permission_name') is required.

== Defining Permissions ==

In each AM's settings.py, there will be settings that will be used to init the permissions table.  For a news module, it might be something like:

`permissions = ('manage-articles', 'view', 'add-category', 'delete-category', 'edit-category')`

Note, when added to the DB, the name of the AM lowercased will be prepended to the names above, so if this is for a AM called "News", I would have to do:

User.has_auth('news-manage-articles')
User.has_auth('news-view')
etc.

There would also be a way to specify default permissions:

{{{
permissions_approved = {
    'manage_articles' : ('g:admin', 'g:news-editor'),
    'view' : ('g:public'),
    'add-category' : ('g:admin', 'g:news-editor'),
    'delete-category' : ('g:admin'),
    'edit-category' : ('g:admin')
}
permissions_denied = {
    'add-category' : ('u:user-who-adds-too-many-categories', 'g:news-writers')
}
}}}

g:* = group name
u:* = user name

If a user does not exist, the default permission will be ignored.  If a group does not exist, it will be added.

== Database Structure ==

Groups Table
    id: PK
    name: name of group

Users Table
    id: PK
    loginId: login name of user
    email: email address of user
    password: sha1 hash of password
    passwordResetRequired: 1 or 0
    superUser: if set, user is automatically assigned all permissions

Assigned Groups
    id: PK
    userId
    groupId

Permissions Table
    id: PK
    identifier: the identifier of the permission
    appModule: the name of the AM this permission belongs to.  If we end up doing application level permissions, this can be NULL.

-- groupId or userId must be NULL
AssignedPermissions Table:
    id: PK
    groupId
    userId
    permissionId
    approved: 1 = approved, 0 = denied (explicit)

== Permission Resolution and Priority ==

When determining which permissions a user gets (remember we use an implicit deny-all, so if they don't get a permission, its as good as an explicit deny).  Denies take precidence over approvals when they are both at the same level (i.e. user or group level).  However, a user approval will take precidence over a group deny.

    * expand out the permission table using DB joins so that there are rows for each permission the user has or for each group the user is assigned to
    * using CASE and SUM(), do a GROUP BY that will leave you with an user_approval_sum, user_denied_sum, group_approval_sum, group_denied_sum column for each permission.  This result set should have one and only one entry for each permission.
    * When populating the user object, the following priority will be assumed
        * user_denied_sum > 0 = no permission
        * user_approval_sum > 0 = has permission
        * group_denied_sum > 0 = no permission
        * group_approval_sum > 0 = has permission
        * none of the above = no permission